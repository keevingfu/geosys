version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: dymesty-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-dymesty_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-dymestydam}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - dymesty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dymesty_admin} -d ${DB_NAME:-dymestydam}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: dymesty-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - dymesty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: dymesty-api
    environment:
      DATABASE_URL: postgresql://${DB_USER:-dymesty_admin}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-dymestydam}
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      API_PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://dymesty.com}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dymesty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: dymesty-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - api
    networks:
      - dymesty-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: dymesty-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - dymesty-network

  backup:
    image: postgres:15-alpine
    container_name: dymesty-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts:/scripts
    command: /bin/sh -c "while true; do /scripts/backup.sh; sleep 86400; done"
    depends_on:
      - postgres
    networks:
      - dymesty-network
    restart: unless-stopped

volumes:
  postgres_data:
    name: dymesty_postgres_data
  redis_data:
    name: dymesty_redis_data

networks:
  dymesty-network:
    name: dymesty_prod_network
    driver: bridge